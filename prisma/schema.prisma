generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum MediaType {
  AVATAR
  COVER
  GALLERY
  VIDEO
}

enum DrinkType {
  TEA
  COFFEE
  HERBALTEA
  GREENTEA
  HOTCHOCOLATE
}

enum SweetenerType {
  NONE
  SUGAR
  SWEETENER
}

enum MilkStrength {
  NONE
  LIGHT
  MEDIUM
  STRONG
}

enum OrderType {
  INTERNAL
  EXTERNAL
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String
  contactNumber String?
  teamId        String?
  team    Team?    @relation("TeamMembers", fields: [teamId], references: [id])
  orders        Order[]
  preferences   Preferences?
  ratings       Rating[]
  media         UserMedia[]
}

model UserMedia {
  id        String   @id @default(uuid())
  userId    String
  url       String
  type      MediaType
  alt       String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Team {
  id      String   @id @default(uuid())
  name    String
  createdAt DateTime  @default(now())
  orders  Order[]  @relation("TeamToOrder")
  members User[]   @relation("TeamMembers")
}

model Preferences {
  id            String         @id @default(uuid())
  userId       String         @unique
  drinkType     DrinkType
  sweetenerType SweetenerType
  sugarAmount   Int
  milkStrength  MilkStrength
  notes         String?
  user         User          @relation(fields: [userId], references: [id])
}

model Rating {
  id        String    @id @default(uuid())
  userId   String
  orderId   String
  quality   Int
  service   Int
  overall   Int
  notes     String?
  voiceNote      Bytes?
  createdAt DateTime  @default(now())

  order     Order     @relation(fields: [orderId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, orderId])
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  teamId      String
  notes       String?
  createdAt   DateTime    @default(now())
  completed   Boolean     @default(false)
  orderType   OrderType   @default(INTERNAL)

  user       User       @relation(fields: [userId], references: [id])
  team        Team        @relation("TeamToOrder", fields: [teamId], references: [id])
  items       OrderItem[]
  ratings     Rating[]
}

model Item {
  id          String      @id @default(uuid())
  name        String
  price       Float
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  itemId   String
  orderId  String
  item     Item   @relation(fields: [itemId], references: [id])
  order    Order  @relation(fields: [orderId], references: [id])
}

model EmailLog {
  id        String   @id @default(uuid())
  to        String
  subject   String
  content   String
  sentAt    DateTime @default(now())
}

model smsLog {
  id        String   @id @default(uuid())
  to        String
  phoneNumber String
  body      String
  sentAt    DateTime @default(now())
}
